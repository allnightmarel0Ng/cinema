// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search actors by name
	// (GET /actors/search)
	GetActorsSearch(c *gin.Context, params GetActorsSearchParams)
	// Get actor by ID
	// (GET /actors/{id})
	GetActorsId(c *gin.Context, id int)
	// Login and obtain JWT token
	// (POST /login)
	PostLogin(c *gin.Context)
	// Logout from account
	// (POST /logout)
	PostLogout(c *gin.Context)
	// Get popular movies
	// (GET /movies/popular)
	GetMoviesPopular(c *gin.Context, params GetMoviesPopularParams)
	// Search movies by name
	// (GET /movies/search)
	GetMoviesSearch(c *gin.Context, params GetMoviesSearchParams)
	// Get movie by ID
	// (GET /movies/{id})
	GetMoviesId(c *gin.Context, id int)
	// Delete movie rate
	// (DELETE /rating)
	DeleteRating(c *gin.Context, params DeleteRatingParams)
	// Rate a movie
	// (POST /rating)
	PostRating(c *gin.Context, params PostRatingParams)
	// Register new account
	// (POST /register)
	PostRegister(c *gin.Context)
	// Delete a review for a movie
	// (DELETE /reviews/{movie_id})
	DeleteReviewsMovieId(c *gin.Context, movieId int)
	// Get reviews for a movie
	// (GET /reviews/{movie_id})
	GetReviewsMovieId(c *gin.Context, movieId int)
	// Create or update a review for a movie
	// (POST /reviews/{movie_id})
	PostReviewsMovieId(c *gin.Context, movieId int)
	// Get profile of user
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetActorsSearch operation middleware
func (siw *ServerInterfaceWrapper) GetActorsSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActorsSearchParams

	// ------------- Required query parameter "prompt" -------------

	if paramValue := c.Query("prompt"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument prompt is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "prompt", c.Request.URL.Query(), &params.Prompt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter prompt: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActorsSearch(c, params)
}

// GetActorsId operation middleware
func (siw *ServerInterfaceWrapper) GetActorsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActorsId(c, id)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogout(c)
}

// GetMoviesPopular operation middleware
func (siw *ServerInterfaceWrapper) GetMoviesPopular(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMoviesPopularParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMoviesPopular(c, params)
}

// GetMoviesSearch operation middleware
func (siw *ServerInterfaceWrapper) GetMoviesSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMoviesSearchParams

	// ------------- Required query parameter "prompt" -------------

	if paramValue := c.Query("prompt"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument prompt is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "prompt", c.Request.URL.Query(), &params.Prompt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter prompt: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMoviesSearch(c, params)
}

// GetMoviesId operation middleware
func (siw *ServerInterfaceWrapper) GetMoviesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMoviesId(c, id)
}

// DeleteRating operation middleware
func (siw *ServerInterfaceWrapper) DeleteRating(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteRatingParams

	// ------------- Required query parameter "movie_id" -------------

	if paramValue := c.Query("movie_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument movie_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "movie_id", c.Request.URL.Query(), &params.MovieId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter movie_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRating(c, params)
}

// PostRating operation middleware
func (siw *ServerInterfaceWrapper) PostRating(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRatingParams

	// ------------- Required query parameter "movie_id" -------------

	if paramValue := c.Query("movie_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument movie_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "movie_id", c.Request.URL.Query(), &params.MovieId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter movie_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "rating" -------------

	if paramValue := c.Query("rating"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument rating is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "rating", c.Request.URL.Query(), &params.Rating)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rating: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRating(c, params)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRegister(c)
}

// DeleteReviewsMovieId operation middleware
func (siw *ServerInterfaceWrapper) DeleteReviewsMovieId(c *gin.Context) {

	var err error

	// ------------- Path parameter "movie_id" -------------
	var movieId int

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", c.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter movie_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteReviewsMovieId(c, movieId)
}

// GetReviewsMovieId operation middleware
func (siw *ServerInterfaceWrapper) GetReviewsMovieId(c *gin.Context) {

	var err error

	// ------------- Path parameter "movie_id" -------------
	var movieId int

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", c.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter movie_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReviewsMovieId(c, movieId)
}

// PostReviewsMovieId operation middleware
func (siw *ServerInterfaceWrapper) PostReviewsMovieId(c *gin.Context) {

	var err error

	// ------------- Path parameter "movie_id" -------------
	var movieId int

	err = runtime.BindStyledParameterWithOptions("simple", "movie_id", c.Param("movie_id"), &movieId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter movie_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReviewsMovieId(c, movieId)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/actors/search", wrapper.GetActorsSearch)
	router.GET(options.BaseURL+"/actors/:id", wrapper.GetActorsId)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.POST(options.BaseURL+"/logout", wrapper.PostLogout)
	router.GET(options.BaseURL+"/movies/popular", wrapper.GetMoviesPopular)
	router.GET(options.BaseURL+"/movies/search", wrapper.GetMoviesSearch)
	router.GET(options.BaseURL+"/movies/:id", wrapper.GetMoviesId)
	router.DELETE(options.BaseURL+"/rating", wrapper.DeleteRating)
	router.POST(options.BaseURL+"/rating", wrapper.PostRating)
	router.POST(options.BaseURL+"/register", wrapper.PostRegister)
	router.DELETE(options.BaseURL+"/reviews/:movie_id", wrapper.DeleteReviewsMovieId)
	router.GET(options.BaseURL+"/reviews/:movie_id", wrapper.GetReviewsMovieId)
	router.POST(options.BaseURL+"/reviews/:movie_id", wrapper.PostReviewsMovieId)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaUW/bNhD+KwS3hw0wYnftgMJvSbsGKbohSFr0oQiCs3Sy2Uikejw5cw3/94GkFFux",
	"ZMtNsjhF3myRPB7v+3j3kdJcRibLjUbNVg7n0kYTzMD/PIzYkPuRk8mRWKF/PEYdo3/OsxzlUCrNOEaS",
	"i55UcfNzDRmutFgmpceuISeTqBQvc+BJQ4dFr3piRl8xYjfkGDXhuls7Tt1k+W8zVQ2WwcUhzMGY+R+/",
	"EiZyKH/pL4PXLyPXD2Fb2gcimLn/EBcpr7gyMiZF0K5p7NbUfYoQgoYp2oJgpkhThdfNGBjLSG0Q9CRh",
	"imDxMgb20UkMZcByKP2DXtOAKeoCm12xTAjZZar0VeNsrDht5gpn8eiybYW+cWoYL2GKBOO6p0lqgJeu",
	"6iIb3R4WmUJzs+3dzW622MS9M2C3zDXyZY6Traumm1HbfGqcEytO1OdM1RXGzUTd7A7jv7wjqIVFarG3",
	"7rKjD0YFKZ6du60Q3D0Cq6LDIrDXbxHvtHu6jMOEOXfzHSEQUtV75P+9q2L3/vNH2Vsx4Vtv23BeKJ0Y",
	"Nz5GG5HKWRkth/KN0piBOAbGa5iJw9MTebP0qvHcbcQIy8Ypkg1jXxwMDgZ+q+aoIVdyKF8eDA5eyp50",
	"G9MvtB8yUd8iUDQJudjH24EHzomTWA7lMbLPQfY89HMWCDJkdFnsy1wqN+G3Amkmq/zoGJDljjeE3wpF",
	"Dn+mAstoQFMGvXCdbW60DTj8MRj4dJnnqYq8O/2v1i1uvmLkLil00bsV8A/KsjCJSEyhY1Hm6UVP/hk8",
	"iYxmDFtws1N1+iORoU4lY92jE81IGlLxlzfiGVtkGdBMDmXAo/RTjGbCx971qZCdq3ixHdeTuAVTn8Jv",
	"IFVxFziX260Fz85R3IRoKK0NAfMrEjEyqNRj92rw6pGw+8eweOeYtMcUOkYO/HH0OXkbyJOasfLuuEq+",
	"zptTY/mD73JHgOtrZHOF+gfXeF5EEVqbFKkIznvgXzxSxD9pKHhiSH3HPcS+LHh+l6+Uui8XbsMumeER",
	"FqBjYUYMSov3nz+KgFFFElPwVpa4Ps00aUWQcKycgnwGsSOIKxKkAUVTsEjIZAKioCA9fF542X5u8iIF",
	"2lQjfKq1p2XHbsXfCduNtaHXPNCq71sGPpxIKEtKZ5GQGcuijJ8I4RRKC7/2/U74dadrfNguBQMdnqwU",
	"3BXlIAWrSO27FCxpWJOCJbLbpGDA9WeSgr7hWQrukhk8V1al4PJCIMYUw31NnTpv/fPyuqFTPrg5898H",
	"heoLDG6I4Gv8uALikBmznAWb0h8Rgil4Aiy0YTEzBa0Ss3Et12B952Q/6dNViASalAQjYKxuCpuV48Pz",
	"qUWBUDVxu6mtV2O7UNXC9NGJWupcP5PwlsRvOZkRjNJZkPxC6SmkKgbG+PenS8IzYBQQSFjmt+qssfEc",
	"c1b1CrRAy0cmnt0hADlYe20obr3C7PyWYbG4TdXFHY5be1qaqvgLjdf1Ywz5K2fbn1dJYNGhVoUxXh50",
	"1DsPWbK8N3tbsoJ3XUtW6P1zlSyogpAYWiaPXquQfmx6dY5yp/NS+U5n/cC0Fupy3UvUn+X2NrlNNyGr",
	"MWtTIfo/uXUflW7Du7+d3+7dW/Ur89Q+aK9lxo0moMctGVcYEoYnSAIKngSN9nQT6xtCJ8QMiSKPoTXF",
	"uvrutND2u4tPrteeXl3UQx6OF92/zCjPQQ2fZpS5486J/Af05vYzd4M2cBjtuzKo35KGT4mESYSLULBh",
	"kaYVuQpKy5f4w34/NRGkE2N5+HrwetCHXMnFxeK/AAAA//8LjmKzDiUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
